#if os(Android) 

import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// JAVA_HOME: /usr/java ///
/// Thu Jun 29 19:15:31 UTC 2017 ///

/// interface me.starpy.sdk.StarpySDK$Listener ///

public protocol StarpySDK_Listener: JavaProtocol {

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.requestLogin(java.lang.String)

    func requestLogin( phone: String? )
    func requestLogin( _ _phone: String? )

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.confirmLogin(java.lang.String)

    func confirmLogin( code: String? )
    func confirmLogin( _ _code: String? )

}

open class StarpySDK_ListenerForward: JNIObjectForward, StarpySDK_Listener {

    private static var StarpySDK_ListenerJNIClass: jclass?

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.requestLogin(java.lang.String)

    private static var requestLogin_MethodID_3: jmethodID?

    open func requestLogin( phone: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: phone, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "requestLogin", methodSig: "(Ljava/lang/String;)V", methodCache: &StarpySDK_ListenerForward.requestLogin_MethodID_3, args: &__args, locals: &__locals )
    }

    open func requestLogin( _ _phone: String? ) {
        requestLogin( phone: _phone )
    }

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.confirmLogin(java.lang.String)

    private static var confirmLogin_MethodID_4: jmethodID?

    open func confirmLogin( code: String? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.encode( value: code, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "confirmLogin", methodSig: "(Ljava/lang/String;)V", methodCache: &StarpySDK_ListenerForward.confirmLogin_MethodID_4, args: &__args, locals: &__locals )
    }

    open func confirmLogin( _ _code: String? ) {
        confirmLogin( code: _code )
    }

}


private typealias StarpySDK_Listener_requestLogin_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func StarpySDK_Listener_requestLogin_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ phone: jobject? ) -> () {
    StarpySDK_ListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).requestLogin( JNIType.decode( type: String(), from: phone ) )
}

private typealias StarpySDK_Listener_confirmLogin_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jobject? ) -> ()

private func StarpySDK_Listener_confirmLogin_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ code: jobject? ) -> () {
    StarpySDK_ListenerBase.swiftObject( jniEnv: __env, javaObject: __this ).confirmLogin( JNIType.decode( type: String(), from: code ) )
}

open class StarpySDK_ListenerBase: JNIObjectProxy, StarpySDK_Listener {

    private static var nativesRegistered = false

    private static func registerNatives() {
        if ( !nativesRegistered ) {
            var natives = [JNINativeMethod]()

            let StarpySDK_Listener_requestLogin_0_thunk: StarpySDK_Listener_requestLogin_0_type = StarpySDK_Listener_requestLogin_0
            natives.append( JNINativeMethod( name: strdup("__requestLogin"), signature: strdup("(Ljava/lang/String;)V"), fnPtr: unsafeBitCast( StarpySDK_Listener_requestLogin_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

            let StarpySDK_Listener_confirmLogin_1_thunk: StarpySDK_Listener_confirmLogin_1_type = StarpySDK_Listener_confirmLogin_1
            natives.append( JNINativeMethod( name: strdup("__confirmLogin"), signature: strdup("(Ljava/lang/String;)V"), fnPtr: unsafeBitCast( StarpySDK_Listener_confirmLogin_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

            withUnsafePointer(to: &natives[0]) {
                nativesPtr in
                let clazz = JNI.FindClass( "org/genie/me_starpy/StarpySDK_ListenerProxy" )
                if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                    JNI.report( "Unable to register java natives" )
                }
            }

            nativesRegistered = true
        }
    }

    public convenience init() {
        self.init( javaObject: nil )
    }

    public required init( javaObject: jobject? ) {
        super.init( javaObject: javaObject )
        StarpySDK_ListenerBase.registerNatives()
        createProxy( javaClassName: "org/genie/me_starpy/StarpySDK_ListenerProxy" )
    }

    static func swiftObject( jniEnv: UnsafeMutablePointer<JNIEnv?>?, javaObject: jobject? ) -> StarpySDK_ListenerBase {
        return unsafeBitCast( swiftPointer( jniEnv: jniEnv, object: javaObject ), to: StarpySDK_ListenerBase.self )
    }

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.requestLogin(java.lang.String)

    open func requestLogin( phone: String? ) /**/ {
    }

    open func requestLogin( _ _phone: String? ) /**/ {
        requestLogin( phone: _phone )
    }

    /// public abstract void me.starpy.sdk.StarpySDK$Listener.confirmLogin(java.lang.String)

    open func confirmLogin( code: String? ) /**/ {
    }

    open func confirmLogin( _ _code: String? ) /**/ {
        confirmLogin( code: _code )
    }

}

#endif
